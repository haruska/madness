"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Bracket implements HasPolicy & Node {
  gameDecisions: BigInt!

  """
  ID of the object.
  """
  id: ID!
  name: String!
  paid: Boolean!
  policy: NodePolicy!
  tieBreaker: Int!
  user: User!
}

"""
The connection type for Bracket.
"""
type BracketConnection {
  """
  A list of edges.
  """
  edges: [BracketEdge!]!

  """
  A list of nodes.
  """
  nodes: [Bracket!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BracketEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Bracket!
}

"""
Autogenerated input type of CreateBracket
"""
input CreateBracketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameDecisions: BigInt!
  name: String!
  tieBreaker: Int!
}

"""
Autogenerated return type of CreateBracket
"""
type CreateBracketPayload {
  bracket: Bracket

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
Autogenerated input type of DeleteBracket
"""
input DeleteBracketInput {
  bracketId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteBracket
"""
type DeleteBracketPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

interface HasPolicy {
  policy: NodePolicy!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createBracket(
    """
    Parameters for CreateBracket
    """
    input: CreateBracketInput!
  ): CreateBracketPayload!
  deleteBracket(
    """
    Parameters for DeleteBracket
    """
    input: DeleteBracketInput!
  ): DeleteBracketPayload!
  updateBracket(
    """
    Parameters for UpdateBracket
    """
    input: UpdateBracketInput!
  ): UpdateBracketPayload!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type NodePolicy {
  destroy: Boolean!
  show: Boolean!
  update: Boolean!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: Viewer!
}

type Round implements Node {
  endDate: ISO8601Date!

  """
  ID of the object.
  """
  id: ID!
  name: String!
  number: Int!
  regions: [String!]
  startDate: ISO8601Date!
}

type Team implements Node {
  """
  ID of the object.
  """
  id: ID!
  name: String!
  seed: Int!
  startingSlot: Int!
}

type Tournament implements HasPolicy & Node {
  gameDecisions: BigInt!
  gameMask: BigInt!
  gamesRemaining: Int!

  """
  ID of the object.
  """
  id: ID!
  policy: NodePolicy!
  rounds: [Round!]!
  started: Boolean!
  teams: [Team!]!
  tipOff: ISO8601DateTime!
}

"""
Autogenerated input type of UpdateBracket
"""
input UpdateBracketInput {
  bracketId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameDecisions: BigInt
  name: String
  tieBreaker: Int
}

"""
Autogenerated return type of UpdateBracket
"""
type UpdateBracketPayload {
  bracket: Bracket

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

type User implements HasPolicy & Node {
  admin: Boolean!
  email: String

  """
  ID of the object.
  """
  id: ID!
  name: String!
  policy: NodePolicy!
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

type Viewer implements HasPolicy & Node {
  brackets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BracketConnection!
  currentUser: User!

  """
  ID of the object.
  """
  id: ID!
  policy: ViewerPolicy!
  tournament64: Tournament!
}

type ViewerPolicy {
  createBracket: Boolean!
  destroy: Boolean!
  show: Boolean!
  update: Boolean!
}
