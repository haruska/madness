"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type Bracket implements Node {
  gameDecisions: BigInt!

  """
  ID of the object.
  """
  id: ID!
  name: String!
  paid: Boolean!
  policy: NodePolicy!
  tieBreaker: Int!
  user: User!
}

"""
Autogenerated input type of CreateBracket
"""
input CreateBracketInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameDecisions: BigInt!
  name: String!
  tieBreaker: Int!
}

"""
Autogenerated return type of CreateBracket
"""
type CreateBracketPayload {
  bracket: Bracket

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createBracket(
    """
    Parameters for CreateBracket
    """
    input: CreateBracketInput!
  ): CreateBracketPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
  policy: NodePolicy!
}

type NodePolicy {
  destroy: Boolean!
  show: Boolean!
  update: Boolean!
}

type Query {
  node(id: ID!): Node
  viewer: Viewer!
}

type Round implements Node {
  endDate: ISO8601Date!

  """
  ID of the object.
  """
  id: ID!
  name: String!
  number: Int!
  policy: NodePolicy!
  regions: [String!]
  startDate: ISO8601Date!
}

type Team implements Node {
  """
  ID of the object.
  """
  id: ID!
  name: String!
  policy: NodePolicy!
  seed: Int!
  startingSlot: Int!
}

type Tournament implements Node {
  gameDecisions: BigInt!
  gameMask: BigInt!
  gamesRemaining: Int!

  """
  ID of the object.
  """
  id: ID!
  policy: NodePolicy!
  rounds: [Round!]!
  started: Boolean!
  teams: [Team!]!
  tipOff: ISO8601DateTime!
}

type User implements Node {
  admin: Boolean!
  email: String

  """
  ID of the object.
  """
  id: ID!
  name: String!
  policy: NodePolicy!
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  messages: [String!]!

  """
  Which input value this error came from
  """
  path: [String!]
}

type Viewer implements Node {
  brackets(onlyUser: Boolean = false): [Bracket!]!
  currentUser: User!

  """
  ID of the object.
  """
  id: ID!
  policy: ViewerPolicy!
  tournament64: Tournament!
}

type ViewerPolicy {
  createBracket: Boolean!
  destroy: Boolean!
  show: Boolean!
  update: Boolean!
}
